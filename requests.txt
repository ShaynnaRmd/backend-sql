-- 1. Lister le nom et le prénom des musiciens, ordonnées par leur date de naissance 
SELECT first_name, last_name FROM artist ORDER BY birthdate
-- 200 résultats

-- 2. Lister le nom et la capacité des lieux disponibles, ordonnés par capacité croissante
SELECT name, max_spectators FROM place ORDER BY max_spectators ASC
-- 5 résultatss

-- 3. Lister les 5 prochains concerts
SELECT id, start_time FROM event WHERE (discr = 'concert') ORDER BY start_time ASC LIMIT 5
-- 5 résultats


GROUP 2: WHERE

-- 1. Lister les spectateurs originaires de Croatie
SELECT first_name, last_name FROM spectateur WHERE (country = 'Croatia')
-- 7 résultats

-- 2. Lister les musiciens nés entre 1970 et 1990
SELECT first_name, last_name FROM artist WHERE YEAR(birthdate) BETWEEN 1970 AND 1990
-- 113 résultats

-- 3. Lister les spectateurs dont le nom commence par B et nés avant 1970
SELECT first_name, last_name, birthdate FROM spectateur WHERE last_name LIKE "B%" AND YEAR(birthdate) < 1970
-- 15 résultats

-- 4. Lister les concerts (id et date) par ordre chronologique
SELECT id, start_time FROM event WHERE(discr = 'concert') ORDER BY start_time ASC
-- 10 résultats


GROUP 3: JOIN

-- 1. Lister les concerts et afficher les artistes présent à chacun d’eux
SELECT concert.id, artist.first_name, artist.last_name 
FROM concert_part 
INNER JOIN artist ON artist.id = concert_part.artist_id 
INNER JOIN concert ON concert.id = concert_part.concert_id
-- 15 résultats

-- 2. Lister les concerts en indiquant le lieu dans lequel ils se déroulent
SELECT concert.id, place.name 
FROM event 
INNER JOIN concert ON event.id = concert.id 
INNER JOIN place ON event.place_id = place.id
-- 10 résultats

-- 3. Lister les instruments de chaque groupe
SELECT DISTINCT g.name, artist.instrument 
FROM `group` as g
INNER JOIN artist_group ON g.id = group_id
INNER JOIN artist ON artist.id = artist_id
-- 163 résultats

-- 4. Lister les concerts auxquels va assister Retha Dookie, avec la liste des membres du groupe, le lieu et la date/heure
SELECT event.id, artist.first_name, artist.last_name, place.name, event.start_time
FROM spectateur
INNER JOIN ticket ON spectateur.id = ticket.spectator_id
INNER JOIN concert_part ON ticket.concert_id = concert_part.concert_id
INNER JOIN `group` ON concert_part.artist_id = `group`.id
INNER JOIN artist_group ON `group`.id = artist_group.group_id
INNER JOIN artist ON artist_group.artist_id = artist.id
INNER JOIN event ON ticket.concert_id = event.id
INNER JOIN place ON event.place_id = place.id
WHERE (spectateur.first_name = 'Retha') AND (spectateur.last_name = 'Dooley')
-- 22 résultats

-- 5. Calculer le panier moyen des ventes
SELECT AVG(price.price) AS panier_moyen 
FROM ticket 
INNER JOIN price ON ticket.price_id = price.id
-- 1 résultat

-- 7. Lister les salles/lieux et les contraintes techniques de chacune.
SELECT place.name, technical_constraints.equipment, technical_constraints.description 
FROM place
INNER JOIN technical_constraints_place ON place_id = place.id
INNER JOIN technical_constraints ON technical_constraints_id = technical_constraints.id
-- 10 résultats

-- 8. Lister les groupes et les salles où ils se produisent
SELECT `group`.name, place.name
FROM place
INNER JOIN event ON place.id = place_id
INNER JOIN concert_part ON event.id = concert_id
INNER JOIN `group` ON `group`.id = artist_id
-- 15 résultats


GROUP 4: GROUP BY

-- 1. Lister les groupes et leur nombre de membres.
SELECT `group`.name, COUNT(artist_id)
FROM `group` JOIN artist_group
ON `group`.id = artist_group.group_id JOIN artist ON artist_group.artist_id = artist.id
GROUP BY name
-- 60 résultats

-- 2. Lister les concerts en indiquant le nombre de places vendues.
SELECT concert_id, COUNT(place)
FROM ticket
GROUP BY concert_id
-- 10 résultats

-- 3. Lister le total des ventes pour chaque journée de festival (en se basant sur startTime)
SELECT date(event.start_time), SUM(price)
FROM event
JOIN ticket on ticket.concert_id = event.id
JOIN price ON price.id = ticket.price_id
GROUP BY date(event.start_time)
-- 8 résultats

-- 4. Lister la moyenne du montant des ventes pour chaque concert
SELECT concert_id, AVG(price)
FROM price 
JOIN ticket ON price.id = ticket.price_id
GROUP BY concert_id
-- 10 résultats

-- 5. Lister les concerts qui ont rassemblé plus de 100 spectateurs
SELECT concert_id, COUNT(spectator_id)
FROM ticket
GROUP BY concert_id
HAVING COUNT(spectator_id)>100
-- 5 résultats


GROUP 5: REQUETES ENSEMBLISTES

-- 1. Lister les nom, prénom de ceux qui font le festival : Artistes et Bénévoles.
SELECT artist.first_name, artist.last_name 
FROM artist 
UNION SELECT staff.first_name, staff.last_name 
FROM staff
-- 210 résultats

-- 2. Pour les téméraires : reprenez la requête précédente et ajouter une colonne indiquant le rôle (artiste ou bénévole) de chacun.
SELECT first_name, last_name, 'artiste' AS role 
FROM artist
UNION SELECT first_name, last_name, 'benevole' AS role 
FROM staff
-- 210 résultats